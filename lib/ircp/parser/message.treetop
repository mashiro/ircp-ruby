# vim: ts=2 sw=2 et
# -*- coding: ascii-8bit -*-
require 'ircp/parser/message_node_classes'
require 'ircp/parser/command_node_classes'

module Ircp
  module Parser
    # RFC2812 base
    grammar Message
      rule message
        prefix:( ':' prefix space )? command_with_params crlf? <MessageNode>
      end

      rule prefix
        servername &space <ShortPrefixNode> /
        nickname suffix:( user:( '!' user )? '@' host )? <LongPrefixNode>
      end

      rule command_with_params
        'PASS' password:( space v:nospcrlfcl+ ) <PasswordCommandNode> /
        'NICK' nickname:( space v:nickname ) <NicknameCommandNode> /
        'USER' user:( space v:user ) mode:( space v:[\d]+ ) unused:( space v:nospcrlfcl+ ) realname:( space ':' v:trailing ) <UserCommandNode> /
        'OPER' name:( space v:nospcrlfcl+ ) password:( space v:nospcrlfcl+ ) <OperCommandNode> /
        'MODE' nickname:( space v:nickname ) flags:( space op:( [+-] ) modes:( letter )* )* <UserModeCommandNode> /
        #'MODE' channel:( space v:channel ) flags:( space op:( [+-] ) modes:( letter )* modeparams:( limit:( [\d]+ )? )* )* <ChannelModeCommandNode> /
        command params:params? <CommandWithParamsNode>
      end

      rule command
        letter+ <CommandNode> /
        digit 3..3 <NumericReplyNode>
      end

      rule params
        heads:( space middle ) ..14 tail:( space ':' trailing )? <ParamsNode> /
        heads:( space middle ) 14..14 tail:( space ( ':' )? trailing )? <ParamsNode>
      end

      rule nospcrlfcl
        # any octet except NUL, CR, LF, " " and ":"
        [^\x00\x0D\x0A\x20\x3A]
      end

      rule middle
        nospcrlfcl ( ':' / nospcrlfcl )*
      end

      rule trailing
        ( ':' / ' ' / nospcrlfcl )*
      end

      rule space
        [\x20]+
      end

      rule crlf
        [\x0D\x0A]
      end


      rule target
        nickname / server
      end

      rule msgtarget
        msgto ( ',' msgto )*
      end

      rule msgto
        channel /
        ( user ( '%' host )? '@' servername ) /
        ( user '%' host ) / targetmask /
        nickname /
        ( nickname '!' user '@' host )
      end

      rule channel
        ( '#' / '+' / ( '!' channelid ) / '&' ) chanstring ( ':' chanstring )?
      end

      rule servername
        '' hostname <ServerNameNode>
      end

      rule host
        '' host:hostaddr <HostNode> /
        '' host:hostname <HostNode>
      end

      rule hostname
        shortname ( '.' shortname )* <HostNameNode>
      end

      rule shortname
        #( ( letter / digit ) ( letter / digit / '-' )* ( letter / digit )* )
        [^\x20!@]+
      end

      rule hostaddr
        '' hostaddr:ip4addr <HostAddrNode> /
        '' hostaddr:ip6addr <HostAddrNode>
      end

      rule ip4addr
        ( digit 1..3 '.' ) 3..3 digit 1..3 <IP4AddrNode>
      end

      rule ip6addr
        hexdigit+ ( ':' hexdigist+ ) 7..7 <IP6AddrNode> /
        '0:0:0:0:0:' ( '0' / 'FFFF' ) ':' ip4addr <IP6AddrNode>
      end

      rule nickname
        #( letter / special ) ( letter / digit / special / '-' )*
        [^\x20!@]+ <NickNameNode>
      end

      rule targetmask
        ( '$' / '#' ) mask
      end

      rule chanstring
        # any octet except NUL, BELL, CR, LF, " ", "," and ":"
        [^\x00\x07\x0A\x0D\x20\x2C\x3A]
      end

      rule channelid
        ( [A-Z] / digit ) 5..5
      end

      rule user
        # any octet except NUL, CR, LF, " " and "@"
        [^\x00\x0A\x0D\x20\x40]+ <UserNode>
      end

      rule key
        # any 7-bit US_ASCII character,
        # except NUL, CR, LF, FF, h/v TABs, and " "
        [\x01-\x05\x07-\x08\x0C\x0E-\x1F\x21-\x7F] 1..23
      end

      rule letter
        [A-Za-z]
      end

      rule digit
        [0-9]
      end

      rule hexdigit
        digit / [A-Fa-f]
      end

      rule special
        # "[", "]", "\", "`", "_", "^", "{", "|", "}"
        [\x5B-\x60\x7B-\x7D]
      end
    end
  end
end
